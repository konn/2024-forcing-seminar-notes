on: push
name: Build Manuscripts
jobs:
  enumerate:
    name: Enumerate Inputs
    runs-on: ubuntu-latest
    outputs:
      inputs: ${{ steps.enumerate.outputs.inputs }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Enumerate *.saty
      id: enumerate
      run: |
        echo "Enumerating files..."

        {
          echo -n "inputs="
          find . -maxdepth 1 -mindepth 1 -type f -name '*.saty' \
            | jq --compact-output -Rs --monochrome-output \
              '{include: split("\n") | map(select(length > 0) | {input: ., output: . | sub("\\.saty$"; ".pdf") | sub("^\\./"; ""), name: . | sub("\\.saty$"; "") | sub("^\\./"; "")})}'
        } | tee -a ${GITHUB_OUTPUT}

  typeset:
    name: Typeset ${{matrix.name}}
    needs: [enumerate]
    runs-on: ubuntu-latest
    env: 
      SHAKE_SATYSFI_VERSION: v0.1.1.0
    strategy:
      matrix: ${{fromJson(needs.enumerate.outputs.inputs)}}
      fail-fast: false
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Download Builder
      env: 
        GH_TOKEN: ${{ github.token }}
      run: |
        TARBALL=shake-satysfi-${{env.SHAKE_SATYSFI_VERSION}}-x86_64-linux.tar.gz
        gh -R konn/shake-satysfi release download ${{env.SHAKE_SATYSFI_VERSION}} --pattern "${TARBALL}"
        tar xzvf "${TARBALL}"
    - name: Cache .shake
      uses: actions/cache@v4
      with:
        path: .shake
        key: ${{ runner.os }}-shake-${{matrix.name}}-${{ hashFiles('**/*.saty', '**/*.satyh')}}
        restore-keys: |
          ${{ runner.os }}-shake-${{matrix.name}}-
    - name: Cache _build
      uses: actions/cache@v4
      with:
        path: _build
        key: ${{ runner.os }}-_build-${{matrix.name}}-${{ hashFiles('**/*.saty', '**/*.satyh')}}
        restore-keys: |
          ${{ runner.os }}-_build-${{matrix.name}}-
    - name: Typeset
      run: |
        docker run -e LANGUAGE=ja_JP.UTF-8 -e LANG=ja_JP.UTF-8 -e LC_CTYPE=ja_JP.UTF-8 -e LC_ALL=ja_JP.UTF-8 -v $(pwd):/satysfi --rm ghcr.io/${{github.repository}}:latest bash -c "pwd; cat ${{matrix.name}}.saty ; /satysfi/shake-satysfi _build/${{matrix.name}}.pdf"
        cp _build/${{matrix.name}}.pdf" .
    - name: Upload PDF
      uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.name}}
        path: ${{matrix.output}}

  release:
    name: Release PDFs
    if: github.ref == 'refs/heads/main'
    needs: [typeset, enumerate]
    runs-on: ubuntu-22.04
    env:
      DEST: pdf_dests
    steps:
    - name: Set timezone
      run: sudo timedatectl set-timezone Asia/Tokyo
    - uses: actions/checkout@v4
    - name: Download PDFs
      uses: actions/download-artifact@v4
    - name: Download releaser
      env: 
        GH_TOKEN: ${{ github.token }}
      run: |
        TARBALL=discord-uploader-v0.2.0.3-x86_64-linux.tar.gz
        gh -R konn/discord-uploader release download v0.2.0.3 --pattern "${TARBALL}"
        tar xzvf "${TARBALL}"
    - name: Collect PDFs
      run: |
        set -euxo pipefail
        mkdir -p "${DEST}"
        cat <<EOF >inputs.json
        ${{needs.enumerate.outputs.inputs}}
        EOF
        cp notes.yaml *.pdf "${DEST}/"
        jq --raw-output '.include | map(.name) | .[]' inputs.json | \
          while read -r NAME; do
            if [[ -f "${NAME}/${NAME}.pdf" ]]; then
              cp "${NAME}/${NAME}.pdf" "${DEST}/"
            elif [[ -f "${NAME}.pdf" ]]; then
              cp "${NAME}.pdf" "${DEST}/"
            else 
              echo "No PDF found for ${NAME}"
            fi
          done
        tree
    - name: Release to Discord!
      env:
        DISCORD_APP_ID: ${{secrets.DISCORD_APP_ID}}
        DISCORD_TOKEN: ${{secrets.DISCORD_TOKEN}}
        DISCORD_CHANNEL: ${{secrets.DISCORD_CHANNEL}}
        KV_CLIENT_ID: ${{secrets.KV_CLIENT_ID}}
        KV_CLIENT_SECRET: ${{secrets.KV_CLIENT_SECRET}}
        KV_ENDPOINT: ${{secrets.KV_ENDPOINT}}
      run: |
        pushd "${DEST}"
        ../discord-uploader
