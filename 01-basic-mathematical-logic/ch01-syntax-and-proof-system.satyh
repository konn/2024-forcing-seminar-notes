@require: class-jlreq/jlreq
@require: math
@require: enumitem/enumitem
@require: azmath/azmath
@require: bibyfi/bibyfi
@require: fss/fss
@require: ruby/ruby
@require: latexcmds/latexcmds
@require: color
@require: derive/derive
@import: macros

let syntax-and-proof-system = 
  open Derive in open DeriveDSL in 
  '<+section?:(`chap:syntax`){一階述語論理の構文と証明体系}<
  +p{
    \emph{一階述語論理}は、予め固定された言語の下で、与えられた集合の元の間の関係を使って記述できるような性質を扱う論理体系である。現代数学は、一階述語論理の下で適切な強さの理論の集合論\footnote{ここでの「集合論」は${\ZF}に限らない広い意味でのものである。よく、圏論が「集合論に代わる数学の基礎として採用できる」と説明されることがあるが、これはつよつよ圏であるトポスの内部言語を使うことで集合論を代替できる、という話で、${\ZF}とは違う集合論の「実装」を与えることができる、という話である。}を採用すれば全て展開できることが知られている。
  }

  +p{
    ${\ZF}集合論は一階述語論理で記述される理論であり、集合論では一階述語論理に関する数理論理学の結果を縦横無尽に使う。本稿ではその必要最小限の事実を振り返っておく。
    まずは、一階述語論理の構文と意味論について簡単に見ていこう。一階述語論理では議論したい理論ごとに言語${\mathcal{L}}を固定して議論をする。一階述語論理における言語とは、何が項で何が論理式なのかを確定させるのに必要な記号の集まりである。
  }

  +p{
    本節のより踏み込んだ内容については、証明論寄りの内容は古森・小野\cite[`古森・小野:2010`];や戸次\cite[`戸次:2012`];を参考にされたい。
  }

  +defn?:(`formula`)?:({一階述語論理の項と論理式})<
    +p{
      一階述語論理の言語${\mathcal{L}}は次の構成要素から成る：
      \listing{
        * 関数記号${\bm{f}^{(n_0)}_0, \bm{f}^{(n_1)}_1, \bm{f}^{(n_2)}_2, \ldots \mhquad (n_i \in ℕ)}
        * 述語記号${\bm{R}^{(m_0)}_0, \bm{R}^{(m_1)}_1, \bm{R}^{(m_2)}_2, \ldots \mhquad (m_i \in ℕ) }
      }
      上添え字の${(n_i), (m_i)}は記号の一部ではなく、各記号ごとに割り当てられている自然数であり、\emph{項数}（\emph{arity}）と呼ばれ、${\bm{f}^{(n)}}は${n}-項関数記号、${\bm{R}^{(m)}}は${m}-項述語記号と呼ばれる。
      特に、${0}-項関数記号は\emph{定数記号}と呼ばれ、メタ変数${\bm{c}_i, \bm{d}_i, \ldots}などで表す。

      一般に、記号の集合は有限とは限らず、任意の無限集合であったり、クラスであったりする場合がある。
    }

    +pn {
      一階の言語${\mathcal{L}}について、${\mathcal{L}}-\emph{項}（\emph{${\mathcal{L}}-term}）を以下のように帰納的に定義する：
      \enumerate{
        * 定数記号${\bm{c}}は${\mathcal{L}}-項である。
        * 変数${v}は${\mathcal{L}}-項である。
        * 関数記号${\bm{f}^{n}}および${\mathcal{L}}-項${\tau_0, \ldots, \tau_{n-1}}に対し、${\bm{f}(\tau_0, \ldots, \tau_{n-1})}は${\mathcal{L}}-項である。
        * 以上で定まるもののみが${\mathcal{L}}-項である。
      }
      最後の「以上で定まるもののみが〜」というのは、計算機科学でいう最小不動点の条件と同じである。以後の帰納的定義では省略する。
    }

    +pn{
      一階言語${\mathcal{L}}について、${\mathcal{L}}-\emph{原子論理式}（\emph{atomic ${\mathcal{L}}-formula}）を以下のように帰納的に定義する：
      \enumerate{
        * ${\bot}は${\mathcal{L}}-原子論理式である。
        * ${\tau, \tau'}が${\mathcal{L}}-項のとき、${\tau \mathrel{\bm{=}} \tau'}は${\mathcal{L}}-原子論理式である。
        * ${\bm{R}}が${m}-項述語記号、${\tau_0, \ldots, \tau_{m-1}}が${\mathcal{L}}-項のとき、${\bm{R}(\tau_0, \ldots, \tau_{m-1})}は${\mathcal{L}}-原子論理式である。
      }
    }

    +pn{
      古典一階述語論理の\emph{${\mathcal{L}}-論理式}（\emph{${\mathcal{L}}}-formula）を以下のように機能的に定義する：
      \enumerate{
        * ${\mathcal{L}}-原子論理式は${\mathcal{L}}-論理式である。
        * ${\varphi, \psi}が${\mathcal{L}}-論理式のとき、${\varphi \to \psi}は${\mathcal{L}}-論理式である。
        * ${x}が変数記号で${\varphi}が${\mathcal{L}}-論理式のとき、${\exists x \varphi}は${\mathcal{L}}-論理式である。
      }
      自由変数\footnote{変数が自由とか束縛されているとかはみなさんが知っているやつです。}を持たない論理式を\emph{閉論理式}（\emph{closed formula}）または\emph{文}（\emph{sentence}）と呼ぶ。
    }
    +p{言語${\mathcal{L}}について、${\mathcal{L}}-論理式の全体のクラスを${\mathcal{L}}と書くことがある。}
    +p{
      ${\to}は右結合とする。つまり、${\varphi \to \psi \to \chi}は${\varphi \to (\psi \to \chi)}の略記として解釈される。
    }
  >

  +remark<
    +p{ここでは、オブジェクトレベルの演算・関係と区別するために、関数・述語記号を太字で表している。本節と次節では暫くこの区別を用いるが、慣れてきたら単に両者を混合して普通の字体で書く。}
  >

  +remark<
    +p{
      いま我々は古典論理だけを考えているので、他の論理結合子・量化子は次のような略記法として導入する：
      \gather?:(AZMathEquation.notag)(${|
        \lnot \varphi \deffml \varphi \to \bot, \mqquad \varphi \land \psi \deffml \lnot (\varphi \to \lnot \psi), \mqquad \varphi \lor \psi \deffml (\varphi \to \psi) \to \psi,
      | \exists x \varphi \deffml \lnot \forall x \lnot \varphi
      | \exists\! x \varphi \deffml \exists x \mhquad \pB{\varphi \land \forall y \mhquad \pb{\subst{\varphi}![(${x}, ${y})] \to y = x}}
      |});
      このようにするのは、今後論理式の複雑性に関する帰納法で色々な証明を回していく際に、場合分けの数は少ないほうが楽だからである。
    }
  >

  +p{一階の言語の例として、ここではこれからずっと付き合うことになる集合論の言語${\LZF}や環の言語${\mathcal{L}_\text!({ring})}などを挙げておく：}

  +example?*?:({集合論の言語})<
    +p{集合論の言語${\LZF}は、二項述語記号${\bold-in^{(2)}}のみを持つ言語である。}
  >

  +p{
    え？\quad;他の記号は要らないの？\quad;和集合とか内包表記とか……と思うかもしれないが、${\ZF}理論は十分強力であり、そうした記号を含む論理式があっても、それを含まない形で書き換えることができる。例えば、${x = A \cup B}は${\forall z \mhquad \pB{z \bold-in x \lrarrow z \bold-in A \lor z \bold-in B}}と書き換えることができる。
  }

  +example?*?:({環の言語})<
    +p{単位的環の言語${\mathcal{L}_\text!{ring}}は定数記号${\bm{0}, \bm{1}}、二項関数号${\bold-plus, \bold-dot}を持つ言語である。}
  >

  +p{無限言語の例としては、体${K}に対して${K}-線型空間の言語がある：}

  +example?*?:({${K}-線型空間の言語})<
    +p{${K}を体とするとき、${K}-線型空間の言語は以下から成る：}
    +listing{
      * 定数記号${\bm{0}}
      * 二項関数記号${\bold-plus}
      * ${c \in K}ごとに、一項関数記号${\bm{c} \bold-dot}
    }
  >

  +p{
    以上はあくまで何が式で何が項かという構文を定義しただけである。それらの証明可能性を与えるのが\emph{証明体系}である。
    一階述語論理には互いに同値な複数の証明体系が知られている。型付き${\lambda}-計算と対応する自然演繹${\NK}や、コンビネータ論理に近いHilbert流の体系${\HK}、簡潔でわかりやすく証明論などで用いられるシーケント計算${\LK}が代表的である。
  }

  +subsection{Gentzen流シーケント計算${\LK}}<
    +p{今回は、証明が扱いやすいシーケント計算${\LK}を標準的な証明体系として扱うことにする。}
    +defn<
      +p{}
      +enumerate{
        * ${\LK}の論理公理を以下で定める：
            \gather?:(AZMathEquation.notag)(${|
              \proven!(derive ${\varphi \vdash \varphi} |> byOp {${(\mathsc!(`Id`))}})
              \mqquad \proven!(derive ${\bot \vdash} |> byOp {${(\mathsc!(`Abs`))}})
            | \proven!(derive ${\vdash x = x} |> byOp {${(\mathsc!(`Refl`))}})
              \mqquad
              \proven!(derive ${x = y\vdash y = x} |> byOp {${(\mathsc!(`Sym`))}})
              \mqquad
              \proven!(derive ${x = y, y = z\vdash x = z} |> byOp {${(\mathsc!(`Trans`))}})
            | \proven!(derive ${x_0 = y_0, \ldots, x_{n-1} = y_{n-1},  \mathbf{R}(\bar{x}) \vdash \mathbf{R}(\bar{y})} |> byOp {${(\mathsc!(`Subs`))}})
            | \proven!(derive ${x_0 = y_0, \ldots, x_{n-1} = y_{n-1} \vdash \mathbf{f}(\bar{x}) = \mathbf{f}(\bar{y})} |> byOp {${(\mathsc!(`Cong`))}})
            |});
          ${(\mathsc!(`Refl`))}から${(\mathsc!(`Cong`))}までの公理を\emph{等号公理}と呼ぶ。
          以下、${\Gamma, \Delta, \Xi, \Theta}を論理式の有限集合を渡るメタ変数とする。
        * ${\Gamma \vdash \Delta}の形の式を\emph{シーケント}または\emph{推件式}（\emph{sequent}）と呼ぶ。
        * 閉論理式の集合${T}を\emph{理論}または\emph{公理系}と呼ぶ。
        * ${\LK}の\emph{証明図}とは、推件式を頂点とする辺ラベルつき根つき木であって、全ての枝が次の\emph{推論規則}のいずれかに従って形成されているものである。根を「\emph{結論}」、葉を「\emph{仮定}」と呼ぶ。\linebreak;

        \emph{構造規則}：
          \gather?:(AZMathEquation.notag)(${
          | \proven!(derive ${\Gamma, \Xi \proves \Delta, \Theta} |> byOp {${(\mathsc!(`Cut`))}} |> from [assume ${\Gamma \proves \Delta, \varphi}; assume ${\varphi, \Xi \proves \Theta}])
            \mqquad 
          \derive-unary{\varphi, \Gamma}{\Delta}{(\mathsc!(`WeakenL`))}{\Gamma}{\Delta}
            \mqquad
            \derive-unary{\Gamma}{\Delta, \varphi}{(\mathsc!(`WeakenR`))}{\Gamma}{\Delta}
          |});
        \emph{論理規則}：${t}を${\mathcal{L}}-項とする。
          \gather?:(AZMathEquation.notag)(${
          | \proven!(
              derive ${\varphi \to \psi, \Gamma, \Xi \proves \Delta, \Theta}
              |> byOp {${(\mathord{\to}\mathrm{L})}}
              |> from [assume ${\Gamma \proves \Delta, \varphi}; assume ${\psi, \Xi \proves \Theta}]
            )
            \mqquad
            \derive-unary{\Gamma}{\Delta, \varphi \to \psi}{(\mathord{\to}R)}
                {\varphi, \Gamma}{\Delta, \psi}
          | \derive-unary{\exists x \varphi, \Gamma}{\Delta}{(\exists\mathrm{L})}{\varphi, \Gamma}{\Delta}
            \mqquad
            \derive-unary{\Gamma}{\Delta, \exists x \varphi}{(\exists\mathrm{R})}{\Gamma}{\Delta, \subst{\varphi}![(${x}, ${t})]}
          |});
          但し${(\exists \mathrm{L})}において${x}は${\Gamma, \Delta}に自由変数として現れないものとする。
        * 理論${T}からの証明図は、結論の左辺が${T}の有限部分集合であるような証明図である。
        * 理論${T}から論理式${\varphi}が\emph{証明可能}（\emph{provable}、記号：${T \proves_{\LK} \varphi}）とは、${T}の有限集合${\Gamma \Subset T}存在して、結論が${\Gamma \vdash \varphi}であるような証明図が存在することである。${T}から証明可能な閉論理式の全体を、${T}の\emph{定理}と呼ぶ。
        * ${\varphi}が${\LK}の\emph{恒真式}（\emph{tautology}、記号${\proves_{\LK} \varphi}）とは、${\varphi}が${\emptyset}で証明可能であることである。
        * 理論${T}が\emph{矛盾している}（\emph{inconsistent}）とは、${T \proves \emptyset}が成り立つこと、すなわち${T}から${\emptyset}への証明図が存在することである。
          矛盾していない理論を\emph{無矛盾}（\emph{consistent}）であるといい、理論${T}が無矛盾であることを記号${\Con(T)}で表す。
        * 理論${T}が\emph{完全}であるとは、任意の閉論理式${\varphi}について${T \proves \varphi}または${T \proves \lnot \varphi}のいずれかが成り立つことである。
      }
    >
    +p{気持ちとしては、${\Gamma \vdash \Delta}は「${\Gamma}が全部成り立つなら、${\Delta}の少なくとも一つが成り立つ」${\bigwedge \Gamma \to \bigvee \Delta}の意味である。}
    +remark< +p{推件式${\Gamma \vdash \Delta} は左右共に空集合が許されている。特に、${\Delta = \emptyset}の場合は${\Gamma}から矛盾が導かれる事を表す。特に、${T}が矛盾することと、${T \vdash}が証明できることは同値である。} >

    +remark<+p{モデル理論では、理論といったら専ら完全な理論を指すことが多い（選択公理で拡大すればいいので）。以下では理論の完全性は仮定しない。}>
    +p{次の結果は重要である：}

    +theorem<+p{${\LK}は無矛盾である。つまり、理論${\emptyset}は無矛盾である。}>

    +p{
      推論規則${(\mathsc!(`Cut`))}以外に論理式の数が減るような推論規則が存在しないことから、次の定理に帰着されることがわかる：
    }
    +theorem?*?:({Cut除去定理、Gentzenの基本定理})<
      +p{${\Gamma \vdash \varphi}が${\LK}で証明できるのなら、${\mathsc!(`Cut`)}を使わずに証明できる。}
    >
    +p{この証明論的な証明は結構たいへんな上に今回の目標である強制法とは絡まないので、証明は省略する。}
    +exercise<+p{おるうぇくんに証明してもらおう！}>
    +p{${\LK}で二重否定除去（\emph{DNE}）${\lnot \lnot \varphi \vdash \varphi}は次のように証明できる（ここで${\lnot \varphi \deffml \varphi \to \bot}という略記を導入していたことに注意）：}
    +eqn-notag(${
      \proven!(
          derive ${(\varphi \to \bot) \to \bot \vdash \varphi}
            |> byOp {${(\mathord{\to}\mathrm{L})}}
            |> from
                [ derive ${\vdash \varphi, \varphi \to \bot}
                    |> byOp {${(\mathord{\to}\mathrm{R})}}
                    |> from
                      [derive ${\varphi \vdash \varphi, \bot}
                        |> byOp {${(\mathsc!(`WeakenR`))}}
                        |> from 
                            [derive ${\varphi \vdash \varphi}
                              |> byOp {${(\mathsc!(`Id`))}}
                            ]
                      ]
                ; derive ${\bot \vdash} |> byOp {${(\mathsc!(`Abs`))}} |> from []
                ]
      )
    });
    +exercise?:(`exc:additional-rules`)< +p{以下の各推論規則は${\LK}から導かれることを示せ。但し、${t}は${\L}-項とし、規則${(\forall\mathrm{R})}において${x}は${\Gamma, \Delta}に自由変数として現れないものとする：}
    +gather?:(AZMathEquation.notag)(${|
    | \derive-unary{\lnot \varphi, \Gamma}{\Delta}{(\lnot\mathrm{L})}{\Gamma}{\Delta, \varphi}
      \mqquad
      \derive-unary{\Gamma}{\Delta, \lnot \varphi}{(\lnot\mathrm{R})}{\varphi, \Gamma}{\Delta}
    | \derive-unary{\phi \land \psi, \Gamma}{\Delta}{(\mathord{\land}\mathrm{L}_1)}{\phi, \Gamma}{\Delta}
      \mqquad
      \derive-unary{\phi \land \psi, \Gamma}{\Delta}{(\mathord{\land}\mathrm{L}_2)}{\psi, \Gamma}{\Delta}
      \mqquad
      \derive-unary{\phi \land \psi, \Gamma}{\Delta}{(\mathord{\land}\mathrm{L}')}{\phi, \psi, \Gamma}{\Delta}
      | \derive-unary{\Gamma}{\Delta, \varphi \lor \psi}{(\mathord{\lor}\mathrm{R}_1)}{\Gamma}{\Delta, \varphi}
        \mqquad
        \derive-unary{\Gamma}{\Delta, \varphi \lor \psi}{(\mathord{\lor}\mathrm{R}_2)}{\Gamma}{\Delta, \psi}
        \mqquad
        \derive-unary{\Gamma}{\Delta, \varphi \lor \psi}{(\mathord{\lor}\mathrm{R}')}{\Gamma}{\Delta, \varphi, \psi}
      | \derive-unary{\varphi, \Gamma}{\Delta, \psi}{(\mathord{\to}\mathrm{R}^{-1})}{\Gamma}{\Delta, \varphi \to \psi}
        \mqquad
        \derive-unary{\Gamma}{\Delta, \varphi, \psi}{(\mathord{\lor}\mathrm{R}^{-1})}{\Gamma}{\Delta, \varphi \lor \psi}
        \mqquad
        \derive-unary{\varphi, \psi, \Gamma}{\Delta}{(\mathord{\land}\mathrm{L}^{-1})}{\varphi \land \psi, \Gamma}{\Delta}
      | \proven!(
        derive ${\varphi \lor \psi, \Gamma, \Xi \vdash \Delta, \Theta}
        |> byOp {${(\mathord{\lor}\mathrm{L})}}
        |> from [assume ${\varphi, \Gamma \vdash \Delta}; assume ${\psi, \Xi \vdash \Theta}]
      )
      \mqquad 
      \proven!(
        derive ${\Gamma, \Xi \vdash \Delta, \Theta, \phi \land \psi}
        |> byOp {${(\mathord{\land}\mathrm{R})}}
        |> from [assume ${\Gamma \vdash \Delta, \varphi}; assume ${\Xi \vdash \Theta, \psi}]
      )
    | \derive-unary{\forall x \varphi, \Gamma}{\Delta}{(\forall\mathrm{L})}{\subst{\varphi}![(${x}, ${t})], \Gamma}{\Delta}
      \mqquad
      \derive-unary{\Gamma}{\Delta, \forall x \varphi}{(\forall\mathrm{R})}{\Gamma}{\Delta, \varphi}
    | \derive-unary{\Gamma}{\Delta, \varphi}{(\forall\mathsc!(`Elim`))}{\Gamma}{\Delta, \forall x \varphi}
    |});
    >
    +remark<+p{${\LK}に上記の推論規則を加えた上で、シーケント${\Gamma \vdash \Delta}の右辺${\Delta}を高々一つの論理式までに制限したものを、直観主義論理のシーケント計算${\mathrm{LJ}}と呼ぶ。}>
    +exercise< +p{以下の式は${\LK}の定理であることを示せ。}
      +eqn-notag(${
        \proven!(derive ${\vdash \varphi \vee \lnot \varphi} |> byOp {${(\mathrm{LEM})}})
        \mqquad
        \proven!(derive ${\vdash ((\varphi \to \psi) \to \varphi) \to \varphi} |> byOp {${(\mathrm{P})}})
      });
      +p{出来上がった証明図を眺めてみて、${\mathrm{LJ}}では通らないことを確認せよ。}
    >
    +remark<
      +p{
        ${\mathrm{P}}はPeirceの法則と呼ばれるものであり、出現する論理結合子が${\to}だけであるにもかかわらず、直観主義論理と古典論理の差異を完全に特徴づける法則であることが知られている。つまり、${\mathrm{LJ}}に${\mathrm{P}}を付け加えると、それは${\LK}と完全に一致する。
      }
      +p{
        また、直観主義論理の体系は型付き${\lambda}-計算の体系と対応がつくという\emph{Curry–Howard対応}が知られており、証明が項、型がその証明される命題に対応している。この関係の下で、${\mathrm{P}}は、続きの計算に当る継続を捕獲する\pre(`call/cc`);と呼ばれる演算子の型に対応していることが知られている。
      }
    >
    +exercise?*?:({強い等号公理})<
      +p{${\LK}において、次が証明可能であることを示せ：}
      +enumerate{
        * ${\tau}を項、${z_0, \ldots, z_{n-1}}を変数とするとき、
          
          \eqn-notag(${
            \forall x_0 \ldots \forall x_{n-1} \forall y_{0} \ldots \forall y_{n-1} \mhquad \pB{x_0 = y_0 \to \ldots \to x_{n-1} = y_{n-1} \to \subst{\tau}![((${\bar{z}}, ${\bar{x}}))] = \subst{\tau}![(${\bar{z}}, ${\bar{y}})]}.
          });
        * ${\varphi}を論理式、${z_0, \ldots, z_{n-1}}を変数とするとき、
          \eqn-notag(${
            \forall x_0 \ldots \forall x_{n-1} \forall y_0 \ldots \forall y_{n-1} \mhquad \pB{x_0 = y_0 \to \ldots \to x_{n-1} = y_{n-1} \to \subst{\varphi}![(${\bar{z}}, ${\bar{x}})] \to \subst{\varphi}![(${\bar{z}}, ${\bar{y}})]}.
          });
      }
    >
    +exercise?*?:({酒場の法則})<
      +p{
        古典一階述語論理のヘンなトートロジーとして有名なものに、一項述語記号${P}をもつ言語で表現できる「酒場の法則」がある：
        \eqn?:(AZMathEquation.notag)(${
          \exists z \mhquad[P(z) \to \forall x P(x)]
        });
        ${P(x)}を「${x}が呑んだくれている」と読むと、これが「酒場の法則」と呼ばれている理由がわかる：「どんな酒場にも、そいつが呑んだくれているなら、他の客も全員呑んだくれているような客${z}氏がいる」。
        ${\LK}でこの法則を示せ。出来上がった証明図を眺めてみて、${\mathrm{LJ}}では通らないことを確認せよ。
      }
      +pn{\emph{ヒント：呑んでない人間がいるならそいつを${z}氏とし、全員呑んでいるなら適当に取ればよい。}}
    >
    +lemma?:(`lem:consis-extend`)<
      +p{${\varphi}を閉論理式とする。理論${T}が無矛盾なら、${T + \varphi}か${T + \lnot \varphi}の少なくとも一方は無矛盾。}
    >
    +proof<
      +p{
        ${T + \varphi, T + \lnot \varphi}が共に矛盾するとして、${T}が矛盾することを示す。このとき、有限の${\Gamma, \Delta \Subset T}が存在して、
        \eqn-notag(${
          \proven!(assume ${\varphi, \Gamma \vdash} |> from [assume ${\vdots}])
          \mqquad
          \proven!(assume ${\lnot \varphi, \Delta \vdash} |> from [assume ${\vdots}])
        });
        となる。ここで、\ref(`exc:additional-rules`);を使えば、
        \eqn-notag(${
          \proven!(derive ${\Gamma, \Delta \vdash}
            |> byOp {${(\mathsc!(`Cut`))}}
            |> from
                [ derive ${\mphantom{\varphi, }\Gamma \vdash \lnot \varphi}
                    |> byOp {${(\lnot\mathrm{R})}}
                    |> from [assume ${\varphi, \Gamma \vdash \mphantom{\lnot \varphi}} |> from [assume ${\vdots}]]
                ; assume ${\lnot \varphi, \Delta \vdash} |> from [assume ${\vdots}]
                ]
          )
        });
        となり、${\Gamma, \Delta \subseteq T}が矛盾する。
      }
    >

    +lemma<
      +p{${\LK}において、${T + \lnot \varphi}が矛盾するなら、${\varphi}は${T}の定理。}
    >
    +proof<
      +p{
        有限部分${\Gamma \Subset T} を取り、${\Gamma + \lnot \varphi}が矛盾していたとして、${\Gamma \vdash \varphi}を示す。しかるに：
        \eqn-notag(${
          \proven!(
            derive ${\Gamma \vdash \varphi}
            |> byOp {${(\mathsc!(`Cut`))}}
            |> from
                [ derive ${\Gamma \vdash \lnot \lnot \varphi}
                  |> byOp {${(\lnot\mathrm{R})}}
                  |> from [assume ${\lnot \varphi, \Gamma \vdash} |> from [assume ${\vdots}]]
                ; derive ${\lnot \lnot \varphi \vdash \varphi}
                  |> byOp {${(\mathrm{DNE})}}
                ]
          )
        });
        よって示せた。
      }
    >
    +remark<+p{実は、この定理は${\mathrm{LJ}}では成立しない。この事を使って、直観主義論理上で「ゼロではなくはない冪零無限小元」を使って解析学を展開する\emph{滑らか無限小解析}（\emph{smooth infinitesimal analysis}）およびその上に構築された\emph{綜合的微分幾何学}（\emph{synthetic diferrential geometry}）という分野がある。}>
    +cor?:(`lem:unprovable`)<+p{${\LK}において、${T}から${\varphi}が証明できないなら、${T +  \lnot \varphi}は無矛盾である。}>
  >

  +subsection{定義による拡張}<
    +p{
      ${\mathcal{L}}-理論${T}が与えられたとき、${T}から存在が証明できる関数があったとしても、${\mathcal{L}}にそれを指す関数記号があるとは限らない。
      しかし、我々は日常的に「関数」を定義して変数に束縛し、それを以後自由に使う、というようなことをする。これは、理論の\emph{定義による拡張}と呼ばれる操作として正当化される：
    }
    +defn?:(`def:defn-ext`)?:({定義による拡張})<
      +p{${T}を${\mathcal{L}}-理論とする。}
      +enumerate{
        * ${\varphi(x_0, \ldots, x_{n-1})}を ${\mathcal{L}}-論理式とする。この時言語${\mathcal{L}}に含まれない新たな述語記号${\bm{R}^{(n)}}を追加した言語${\mathcal{L}'}を考える。
          このとき、${\mathcal{L}'}-理論${T'}を、次で定義する：
          \eqn-notag(${
            T' \defeq T \cup \pb{ \forall \bar{x}\mhquad \pB{R(\bar{x}) \liff \varphi(\bar{x})} }
          });
          これを${\varphi}による${T}の\emph{定義による拡張}（\emph{definitional extension}）と呼ぶ。
        * ${\varphi(x_0, \ldots, x_{n-1}, y)}を ${\mathcal{L}}-論理式とし、
          \eqn-notag(${T \proves \forall \bar{x} \mhquad \exists\! y \mhquad \varphi(\bar{x}, y)});
          が成り立つとする。この時言語${\mathcal{L}}に含まれない新たな関数記号${\bm{f}^{(n)}}を追加した言語${\mathcal{L}'}を考える。
          このとき、${\mathcal{L}'}-理論${T'}を、次で定義する：
          \eqn-notag(${
            T' \defeq T \cup \pb{ \forall \bar{x}\mhquad \forall y\mhquad \pB{f(\bar{x}) = y \liff \varphi(\bar{x}, y)} }
          });
          これも${\varphi}による${T}の\emph{定義による拡張}（\emph{definitional extension}）と呼ぶ。
      }
    >
    +p{直感的には、この拡張によって証明能力や表現力は変わらないことが期待される。こういった関係を\emph{保存拡大}という：}
    +defn<+p{
      ${\mathcal{L} \subseteq \mathcal{L}'}を言語、${T, T'}をそれぞれ言語${\mathcal{L}, \mathcal{L'}}による理論とする。${T'}が${T}の\emph{保存拡大}（\emph{conservative extension}）であるとは、任意の${\mathcal{L}}-論理式${\varphi}について、次が成り立つことである：
      \eqn-notag(${
        T \proves \varphi \iff T' \proves \varphi.
      });
    }>
    +lemma?:(`lem:defn-ext`)<
      +p{}
      +enumerate{
        * 述語記号に関する定義による拡張は保存拡大である。より詳しく、任意の${\mathcal{L}'}-論理式${\varphi}に対して${\mathcal{L}}-論理式${\varphi*}が存在して、
          \eqn-notag(${
            T' \proves \varphi \liff \varphi^{*},
            \mqquad T' \proves \varphi \iff T \proves \varphi^{*}.
          });
        * 関数記号に関する定義による拡張は保存拡大である。より詳しく、任意の${\mathcal{L}'}-論理式${\varphi}に対して${\mathcal{L}}-論理式${\varphi*}が存在して、
          \eqn-notag(${
            T' \proves \varphi \liff \varphi^{*},
            \mqquad T' \proves \varphi \iff T \proves \varphi^{*}.
          });
      }
    >
    +exercise<+p{証明せよ。関数版の場合は、入れ子になった項に注意。}>
  >
>>
